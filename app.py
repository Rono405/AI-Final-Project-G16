# -*- coding: utf-8 -*-
"""Stremlit 2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IKACalKfqAe2RAI8dBzP_R833tGWCqHX
"""

# AI-Powered Food Recommendation System - Streamlit Version (Colab-Compatible)

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os
import gzip
import shutil
import requests

st.set_page_config(page_title="Food Recommendation System", layout="centered")

# Download and extract the dataset
@st.cache_data
def download_and_load_data():
    url = "https://static.openfoodfacts.org/data/en.openfoodfacts.org.products.csv.gz"
    compressed_file = "products.csv.gz"
    extracted_file = "products.csv"

    if not os.path.exists(extracted_file):
        with requests.get(url, stream=True) as r:
            with open(compressed_file, 'wb') as f:
                shutil.copyfileobj(r.raw, f)
        with gzip.open(compressed_file, 'rb') as f_in:
            with open(extracted_file, 'wb') as f_out:
                shutil.copyfileobj(f_in, f_out)

    usecols = ['product_name', 'nutriscore_grade', 'energy_100g', 'proteins_100g',
               'fat_100g', 'carbohydrates_100g', 'sugars_100g', 'fiber_100g', 'salt_100g']

    chunks = pd.read_csv(extracted_file, sep='\t', usecols=usecols,
                         low_memory=False, chunksize=100000)
    df_list = []
    for chunk in chunks:
        chunk.dropna(inplace=True)
        if len(chunk) > 0:
            df_list.append(chunk.sample(min(len(chunk), 1000)))
        if len(df_list) * 1000 >= 5000:
            break
    df = pd.concat(df_list)
    return df

# Load data
st.info("Loading data...")
df = download_and_load_data()

# Define health goals
GOALS = {
    'Weight Loss': df[df['fat_100g'] < 5],
    'Muscle Gain': df[df['proteins_100g'] > 10],
    'Better Skin': df[df['fiber_100g'] > 2],
    'Mood Boost': df[df['sugars_100g'] > 10],
    'Weight Gain': df[df['energy_100g'] > 300]
}

# UI
st.title("ðŸ¥— AI-Powered Food Recommendation System")
selected_goal = st.selectbox("Select Your Health Goal", list(GOALS.keys()))

if selected_goal:
    st.subheader(f"Top Food Recommendations for: {selected_goal}")
    filtered_df = GOALS[selected_goal]
    recommendations = filtered_df['product_name'].dropna().unique().tolist()[:5]
    for i, item in enumerate(recommendations, 1):
        st.write(f"{i}. {item}")

    # Visualization
    st.subheader("Nutrient Breakdown")
    chart_df = filtered_df[['proteins_100g', 'fat_100g', 'carbohydrates_100g']].dropna().head(10)
    fig, ax = plt.subplots(figsize=(8, 5))
    sns.barplot(data=chart_df, ax=ax)
    ax.set_title(f'Nutrient Comparison - {selected_goal}')
    st.pyplot(fig)

st.caption("Powered by OpenFoodFacts â€¢ Built with Streamlit")

from colabcode import ColabCode
ColabCode(port=10000, authtoken="301L2tf7sf7Iz3qnXI9hObXp5oz_7jqHX4kDLj3t3AJ2CZTrj")

!pip install streamlit pyngrok==4.1.1

!pip install streamlit

from colabcode import ColabCode
ColabCode(port=10000)

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# # AI-Powered Food Recommendation System - Streamlit Version (Colab-Compatible)
# 
# import streamlit as st
# import pandas as pd
# import matplotlib.pyplot as plt
# import seaborn as sns
# import os
# import gzip
# import shutil
# import requests
# 
# st.set_page_config(page_title="Food Recommendation System", layout="centered")
# 
# # Download and extract the dataset
# @st.cache_data
# def download_and_load_data():
#     url = "https://static.openfoodfacts.org/data/en.openfoodfacts.org.products.csv.gz"
#     compressed_file = "products.csv.gz"
#     extracted_file = "products.csv"
# 
#     if not os.path.exists(extracted_file):
#         with requests.get(url, stream=True) as r:
#             with open(compressed_file, 'wb') as f:
#                 shutil.copyfileobj(r.raw, f)
#         with gzip.open(compressed_file, 'rb') as f_in:
#             with open(extracted_file, 'wb') as f_out:
#                 shutil.copyfileobj(f_in, f_out)
# 
#     usecols = ['product_name', 'nutriscore_grade', 'energy_100g', 'proteins_100g',
#                'fat_100g', 'carbohydrates_100g', 'sugars_100g', 'fiber_100g', 'salt_100g']
# 
#     chunks = pd.read_csv(extracted_file, sep='\t', usecols=usecols,
#                          low_memory=False, chunksize=100000)
#     df_list = []
#     for chunk in chunks:
#         chunk.dropna(inplace=True)
#         if len(chunk) > 0:
#             df_list.append(chunk.sample(min(len(chunk), 1000)))
#         if len(df_list) * 1000 >= 5000:
#             break
#     df = pd.concat(df_list)
#     return df
# 
# # Load data
# st.info("Loading data...")
# df = download_and_load_data()
# 
# # Define health goals
# GOALS = {
#     'Weight Loss': df[df['fat_100g'] < 5],
#     'Muscle Gain': df[df['proteins_100g'] > 10],
#     'Better Skin': df[df['fiber_100g'] > 2],
#     'Mood Boost': df[df['sugars_100g'] > 10],
#     'Weight Gain': df[df['energy_100g'] > 300]
# }
# 
# # UI
# st.title("ðŸ¥— AI-Powered Food Recommendation System")
# selected_goal = st.selectbox("Select Your Health Goal", list(GOALS.keys()))
# 
# if selected_goal:
#     st.subheader(f"Top Food Recommendations for: {selected_goal}")
#     filtered_df = GOALS[selected_goal]
#     recommendations = filtered_df['product_name'].dropna().unique().tolist()[:5]
#     for i, item in enumerate(recommendations, 1):
#         st.write(f"{i}. {item}")
# 
#     # Visualization
#     st.subheader("Nutrient Breakdown")
#     chart_df = filtered_df[['proteins_100g', 'fat_100g', 'carbohydrates_100g']].dropna().head(10)
#     fig, ax = plt.subplots(figsize=(8, 5))
#     sns.barplot(data=chart_df, ax=ax)
#     ax.set_title(f'Nutrient Comparison - {selected_goal}')
#     st.pyplot(fig)
# 
# st.caption("Powered by OpenFoodFacts â€¢ Built with Streamlit")

!streamlit run app.py &>/dev/null&

import time
time.sleep(3)

from pyngrok import ngrok
# Replace "YOUR_AUTH_TOKEN" with your actual ngrok authtoken
ngrok.set_auth_token("301L2tf7sf7Iz3qnXI9hObXp5oz_7jqHX4kDLj3t3AJ2CZTrj")
public_url = ngrok.connect(port="8501")

print(f"Streamlit app available at: {public_url}")

!kill $(ps aux | grep 'ngrok' | awk '{print $2}')

"""# Task
Explain the steps to sharing a Streamlit application to Streamlit Cloud.

## Create a github repository

### Subtask:
Create a new public GitHub repository and upload your `app.py` file and any other necessary files to it.

## Sign in to streamlit cloud

### Subtask:
Go to the Streamlit Cloud website and sign in using your GitHub account.

## Deploy the app

### Subtask:
Click on the "New app" button, select your GitHub repository and the branch where your code is located, specify the main file path (e.g., `app.py`), and click "Deploy!".

## Summary:

### Data Analysis Key Findings

*   Sharing a Streamlit application to Streamlit Cloud requires several steps, including creating a public GitHub repository with the application code, signing into Streamlit Cloud using a GitHub account, and deploying the app through the Streamlit Cloud interface by selecting the repository, branch, and main file.

### Insights or Next Steps

*   The described process involves manual steps requiring user interaction outside of the coding environment, such as creating a GitHub repository, uploading files, navigating a website, and clicking buttons. These steps cannot be automated programmatically.
"""
